version: '3.8'
services:
  postgres:
    # image: postgres:15
    # ports:
    #   - "5432:5432"
    # environment:
    #   - POSTGRES_DB=${POSTGRES_DB}
    #   - POSTGRES_USER=${POSTGRES_USER}
    #   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    # networks:
    #   - my_network

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: >
      etcd
      -advertise-client-urls=http://0.0.0.0:2379
      -listen-client-urls=http://0.0.0.0:2379
      --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - my_network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /minio_data --console-address ":9001"
    volumes:
      - milvus_minio_data:/minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - my_network

  milvus:
    image: milvusdb/milvus:v2.4.17
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - my_network

  # backend:
  #   build: 
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_started
  #     milvus:
  #       condition: service_started
  #   environment:
  #     - DATABASE_URL=${DATABASE_URL}
  #     - MINIO_ACCESS_KEY=minioadmin
  #     - MINIO_SECRET_KEY=minioadmin
  #     - MINIO_ENDPOINT=minio:9000
  #     - MILVUS_HOST=milvus
  #     - MILVUS_PORT=19530
  #   networks:
  #     - my_network
  #   volumes:
  #     - ./backend:/app

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     args:
  #       FRONTEND_URL: ${FRONTEND_URL}
  #       BACKEND_URL: ${BACKEND_URL}
  #       MEDIA_URL: ${MEDIA_URL}
  #       NODE_ENV: ${NODE_ENV}
  #   depends_on:
  #     backend:
  #       condition: service_started
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - my_network
  #   volumes:
  #     - ./frontend:/app

volumes:
  # postgres_data:
  #   driver: local
  milvus_minio_data:
    driver: local
  etcd_data:
    driver: local
  milvus_data:
    driver: local

networks:
  my_network:
    driver: bridge